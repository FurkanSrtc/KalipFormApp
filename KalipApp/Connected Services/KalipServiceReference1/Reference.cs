//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KalipApp.KalipServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="KalipServiceReference1.IKalipService")]
    public interface IKalipService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/getAll", ReplyAction="http://tempuri.org/IKalipService/getAllResponse")]
        KalipServiceWCF.Numune[] getAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/getAll", ReplyAction="http://tempuri.org/IKalipService/getAllResponse")]
        System.Threading.Tasks.Task<KalipServiceWCF.Numune[]> getAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/GetUser", ReplyAction="http://tempuri.org/IKalipService/GetUserResponse")]
        int GetUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/GetUser", ReplyAction="http://tempuri.org/IKalipService/GetUserResponse")]
        System.Threading.Tasks.Task<int> GetUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/Find", ReplyAction="http://tempuri.org/IKalipService/FindResponse")]
        KalipServiceWCF.Numune Find(int urunkodu, int parcakodu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/Find", ReplyAction="http://tempuri.org/IKalipService/FindResponse")]
        System.Threading.Tasks.Task<KalipServiceWCF.Numune> FindAsync(int urunkodu, int parcakodu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/FindUrunKod", ReplyAction="http://tempuri.org/IKalipService/FindUrunKodResponse")]
        KalipServiceWCF.Numune[] FindUrunKod(int urunkodu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/FindUrunKod", ReplyAction="http://tempuri.org/IKalipService/FindUrunKodResponse")]
        System.Threading.Tasks.Task<KalipServiceWCF.Numune[]> FindUrunKodAsync(int urunkodu);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/Add", ReplyAction="http://tempuri.org/IKalipService/AddResponse")]
        void Add(KalipServiceWCF.Numune numune);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/Add", ReplyAction="http://tempuri.org/IKalipService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(KalipServiceWCF.Numune numune);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/Edit", ReplyAction="http://tempuri.org/IKalipService/EditResponse")]
        void Edit(KalipServiceWCF.Numune numune);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/Edit", ReplyAction="http://tempuri.org/IKalipService/EditResponse")]
        System.Threading.Tasks.Task EditAsync(KalipServiceWCF.Numune numune);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/Delete", ReplyAction="http://tempuri.org/IKalipService/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/Delete", ReplyAction="http://tempuri.org/IKalipService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/FindByDate", ReplyAction="http://tempuri.org/IKalipService/FindByDateResponse")]
        KalipServiceWCF.Numune[] FindByDate(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/FindByDate", ReplyAction="http://tempuri.org/IKalipService/FindByDateResponse")]
        System.Threading.Tasks.Task<KalipServiceWCF.Numune[]> FindByDateAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/PieChartDate", ReplyAction="http://tempuri.org/IKalipService/PieChartDateResponse")]
        KalipServiceWCF.prcPieChartOnlyDate_Result[] PieChartDate(string baslangic, string bitis);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/PieChartDate", ReplyAction="http://tempuri.org/IKalipService/PieChartDateResponse")]
        System.Threading.Tasks.Task<KalipServiceWCF.prcPieChartOnlyDate_Result[]> PieChartDateAsync(string baslangic, string bitis);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/PieChart", ReplyAction="http://tempuri.org/IKalipService/PieChartResponse")]
        KalipServiceWCF.prcPieChart_Result[] PieChart(string baslangic, string bitis, int parca, int kalip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IKalipService/PieChart", ReplyAction="http://tempuri.org/IKalipService/PieChartResponse")]
        System.Threading.Tasks.Task<KalipServiceWCF.prcPieChart_Result[]> PieChartAsync(string baslangic, string bitis, int parca, int kalip);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IKalipServiceChannel : KalipApp.KalipServiceReference1.IKalipService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class KalipServiceClient : System.ServiceModel.ClientBase<KalipApp.KalipServiceReference1.IKalipService>, KalipApp.KalipServiceReference1.IKalipService {
        
        public KalipServiceClient() {
        }
        
        public KalipServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public KalipServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KalipServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public KalipServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public KalipServiceWCF.Numune[] getAll() {
            return base.Channel.getAll();
        }
        
        public System.Threading.Tasks.Task<KalipServiceWCF.Numune[]> getAllAsync() {
            return base.Channel.getAllAsync();
        }
        
        public int GetUser(string username, string password) {
            return base.Channel.GetUser(username, password);
        }
        
        public System.Threading.Tasks.Task<int> GetUserAsync(string username, string password) {
            return base.Channel.GetUserAsync(username, password);
        }
        
        public KalipServiceWCF.Numune Find(int urunkodu, int parcakodu) {
            return base.Channel.Find(urunkodu, parcakodu);
        }
        
        public System.Threading.Tasks.Task<KalipServiceWCF.Numune> FindAsync(int urunkodu, int parcakodu) {
            return base.Channel.FindAsync(urunkodu, parcakodu);
        }
        
        public KalipServiceWCF.Numune[] FindUrunKod(int urunkodu) {
            return base.Channel.FindUrunKod(urunkodu);
        }
        
        public System.Threading.Tasks.Task<KalipServiceWCF.Numune[]> FindUrunKodAsync(int urunkodu) {
            return base.Channel.FindUrunKodAsync(urunkodu);
        }
        
        public void Add(KalipServiceWCF.Numune numune) {
            base.Channel.Add(numune);
        }
        
        public System.Threading.Tasks.Task AddAsync(KalipServiceWCF.Numune numune) {
            return base.Channel.AddAsync(numune);
        }
        
        public void Edit(KalipServiceWCF.Numune numune) {
            base.Channel.Edit(numune);
        }
        
        public System.Threading.Tasks.Task EditAsync(KalipServiceWCF.Numune numune) {
            return base.Channel.EditAsync(numune);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public KalipServiceWCF.Numune[] FindByDate(System.DateTime date) {
            return base.Channel.FindByDate(date);
        }
        
        public System.Threading.Tasks.Task<KalipServiceWCF.Numune[]> FindByDateAsync(System.DateTime date) {
            return base.Channel.FindByDateAsync(date);
        }
        
        public KalipServiceWCF.prcPieChartOnlyDate_Result[] PieChartDate(string baslangic, string bitis) {
            return base.Channel.PieChartDate(baslangic, bitis);
        }
        
        public System.Threading.Tasks.Task<KalipServiceWCF.prcPieChartOnlyDate_Result[]> PieChartDateAsync(string baslangic, string bitis) {
            return base.Channel.PieChartDateAsync(baslangic, bitis);
        }
        
        public KalipServiceWCF.prcPieChart_Result[] PieChart(string baslangic, string bitis, int parca, int kalip) {
            return base.Channel.PieChart(baslangic, bitis, parca, kalip);
        }
        
        public System.Threading.Tasks.Task<KalipServiceWCF.prcPieChart_Result[]> PieChartAsync(string baslangic, string bitis, int parca, int kalip) {
            return base.Channel.PieChartAsync(baslangic, bitis, parca, kalip);
        }
    }
}
